// app/(tabs)/hunt.tsx - Fixed with actual NFC Service integration
import { useAuth } from '@/hooks/useAuth';
import { useTreasures } from '@/hooks/useTreasures';
import { NFCReadProgress, NFCService } from '@/services/NFCService';
import { Ionicons } from '@expo/vector-icons';
import { CameraType, CameraView, useCameraPermissions } from 'expo-camera';
import { LinearGradient } from 'expo-linear-gradient';
import * as Location from 'expo-location';
import { useLocalSearchParams, useRouter } from 'expo-router';
import React, { useEffect, useState } from 'react';
import {
  ActivityIndicator,
  Alert,
  Animated,
  Dimensions,
  Image,
  Modal,
  Platform,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View
} from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

const { width, height } = Dimensions.get('window');

interface TreasureData {
  treasureId: string;
  name: string;
  description: string;
  coordinates: string;
  location: string;
  rarity: number;
  rewardPoints: number;
  createdAt: number;
  imageUrl?: string;
  hash?: string;
}

interface DiscoveryResult {
  discovery: {
    discoveryId: string;
    discoveredAt: string;
    distance: number;
    method: string;
  };
  nft?: {
    objectId: string;
    transactionDigest: string;
    onChain: boolean;
    explorerUrl?: string;
  };
  treasure: {
    treasureId: string;
    name: string;
    description: string;
    rarity: number;
    rarityName: string;
    rewardPoints: number;
    imageUrl: string;
    source?: string;
    wasAutoGenerated?: boolean;
  };
  profile: {
    oldRank: string;
    newRank: string;
    rankUpgraded: boolean;
    pointsEarned: number;
    totalTreasures: number;
    currentStreak: number;
  };
}

export default function HuntScreen() {
  const router = useRouter();
  const { user } = useAuth();
  const { discoverTreasure, loading: treasuresLoading } = useTreasures();
  const { treasureId } = useLocalSearchParams();

  const [lastScanTime, setLastScanTime] = useState(0);
  const [isProcessing, setIsProcessing] = useState(false);
  const [permission, requestPermission] = useCameraPermissions();
  const [isScanning, setIsScanning] = useState(false);
  const [scanMode, setScanMode] = useState<'qr' | 'nfc'>('qr');
  const [location, setLocation] = useState<Location.LocationObject | null>(null);
  const [cameraFacing, setCameraFacing] = useState<CameraType>('back');
  const [enableTorch, setEnableTorch] = useState(false);

  // NFC States
  const [nfcSupported, setNfcSupported] = useState(false);
  const [nfcEnabled, setNfcEnabled] = useState(false);
  const [nfcScanning, setNfcScanning] = useState(false);
  const [nfcProgress, setNfcProgress] = useState<NFCReadProgress | null>(null);

  // NFT Discovery States
  const [discoveredTreasure, setDiscoveredTreasure] = useState<TreasureData | null>(null);
  const [discoveryResult, setDiscoveryResult] = useState<DiscoveryResult | null>(null);
  const [showNFTModal, setShowNFTModal] = useState(false);
  const [mintingNFT, setMintingNFT] = useState(false);

  // Animations
  const [pulseAnim] = useState(new Animated.Value(1));
  const [celebrationAnim] = useState(new Animated.Value(0));
  const [shimmerAnim] = useState(new Animated.Value(0));

  const insets = useSafeAreaInsets();

  useEffect(() => {
    getCurrentLocation();
    checkNFCSupport();
  }, []);

  useEffect(() => {
    if (showNFTModal) {
      // Start celebration animation
      Animated.sequence([
        Animated.timing(celebrationAnim, {
          toValue: 1,
          duration: 600,
          useNativeDriver: true,
        }),
      ]).start();

      // Start shimmer animation
      Animated.loop(
        Animated.timing(shimmerAnim, {
          toValue: 1,
          duration: 2000,
          useNativeDriver: true,
        })
      ).start();
    } else {
      celebrationAnim.setValue(0);
      shimmerAnim.setValue(0);
    }
  }, [showNFTModal]);

  // Add pulsing animation for NFC
  useEffect(() => {
    if (scanMode === 'nfc' && nfcSupported) {
      Animated.loop(
        Animated.sequence([
          Animated.timing(pulseAnim, {
            toValue: 1.1,
            duration: 1000,
            useNativeDriver: true,
          }),
          Animated.timing(pulseAnim, {
            toValue: 1,
            duration: 1000,
            useNativeDriver: true,
          }),
        ])
      ).start();
    } else {
      pulseAnim.setValue(1);
    }
  }, [scanMode, nfcSupported]);

  const checkNFCSupport = async () => {
    try {
      console.log('🔍 Checking NFC support...');
      
      const availability = await NFCService.checkNFCAvailability();
      
      console.log('NFC Availability:', availability);
      
      setNfcSupported(availability.deviceSupported);
      setNfcEnabled(availability.nfcEnabled);
      
      if (availability.deviceSupported && availability.nfcEnabled) {
        console.log('✅ NFC is fully supported and enabled');
      } else if (availability.deviceSupported && !availability.nfcEnabled) {
        console.log('⚠️ NFC supported but disabled');
      } else {
        console.log('❌ NFC not supported:', availability.details);
      }
      
    } catch (error) {
      console.error('❌ Failed to check NFC support:', error);
      setNfcSupported(false);
      setNfcEnabled(false);
    }
  };

  const getCurrentLocation = async () => {
    try {
      console.log('📍 Getting current location...');

      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permission Denied', 'Location permission is required for treasure hunting');
        return;
      }

      const locationResult = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.High,
        timeout: 10000,
      });

      setLocation(locationResult);
      console.log(`✅ Location: ${locationResult.coords.latitude}, ${locationResult.coords.longitude}`);

    } catch (error) {
      console.error('❌ Location error:', error);
      Alert.alert('Error', 'Could not get current location. Please try again.');
    }
  };

  const handleBarCodeScanned = async ({ type, data }: { type: string; data: string }) => {
    // Prevent rapid successive scans (debouncing)
    const now = Date.now();
    if (now - lastScanTime < 2000 || !isScanning || isProcessing) {
      return;
    }

    setLastScanTime(now);
    setIsProcessing(true);
    setIsScanning(false); // Stop scanning immediately

    try {
      console.log('📱 Raw QR Data:', data);

      let treasureData: TreasureData;

      try {
        const qrData = JSON.parse(data);

        // Handle your specific QR structure or treasure ID
        if (qrData.treasure_name && qrData.nfc_data) {
          const nfcData = JSON.parse(qrData.nfc_data);

          treasureData = {
            treasureId: nfcData.id || 'UNKNOWN',
            name: qrData.treasure_name,
            description: `Discovered treasure: ${qrData.treasure_name}`,
            coordinates: `${nfcData.lat},${nfcData.lng}`,
            location: 'Scanned Location',
            rarity: 1,
            rewardPoints: 100,
            createdAt: nfcData.t ? nfcData.t * 1000 : Date.now(),
            imageUrl: undefined,
            hash: nfcData.h || ''
          };
        } else if (qrData.treasureId || qrData.id) {
          // Handle direct treasure ID format
          treasureData = {
            treasureId: qrData.treasureId || qrData.id,
            name: qrData.name || `Treasure ${qrData.treasureId || qrData.id}`,
            description: qrData.description || 'A mysterious treasure awaits',
            coordinates: qrData.coordinates || `${location?.coords.latitude || 21.0285},${location?.coords.longitude || 105.8542}`,
            location: qrData.location || 'Scanned Location',
            rarity: qrData.rarity || 1,
            rewardPoints: qrData.rewardPoints || 100,
            createdAt: Date.now(),
            imageUrl: qrData.imageUrl,
          };
        } else {
          throw new Error('Invalid QR code format');
        }
      } catch (parseError) {
        console.error('❌ QR Parse Error:', parseError);

        // Try parsing as simple treasure ID string
        const treasureIdMatch = data.match(/^[A-Z0-9_]+$/);
        if (treasureIdMatch) {
          treasureData = {
            treasureId: data,
            name: `Treasure ${data}`,
            description: 'A mysterious treasure discovered via QR code',
            coordinates: `${location?.coords.latitude || 21.0285},${location?.coords.longitude || 105.8542}`,
            location: 'QR Scanned Location',
            rarity: 1,
            rewardPoints: 100,
            createdAt: Date.now(),
          };
        } else {
          throw new Error('Invalid QR code format');
        }
      }

      console.log('✅ Parsed Treasure Data:', treasureData);

      // Add small delay to prevent UI flickering
      setTimeout(async () => {
        await handleTreasureDiscovered(treasureData);
        setIsProcessing(false);
      }, 500);

    } catch (error) {
      console.error('❌ QR Scan Error:', error);
      setIsProcessing(false);

      setTimeout(() => {
        Alert.alert(
          'Invalid QR Code',
          'This QR code is not a valid treasure code',
          [
            {
              text: 'Try Again',
              onPress: () => setIsScanning(true)
            }
          ]
        );
      }, 500);
    }
  };

  const handleNFCScan = async () => {
    if (!nfcSupported) {
      Alert.alert(
        'NFC Not Supported',
        'Your device does not support NFC functionality.',
        [{ text: 'OK' }]
      );
      return;
    }

    if (!nfcEnabled) {
      Alert.alert(
        'NFC Disabled',
        'NFC is disabled on your device. Please enable NFC in your device settings to scan treasure tags.',
        [
          { text: 'Cancel' },
          {
            text: 'Open Settings',
            onPress: () => {
              // You could open device settings here
              Alert.alert('Info', 'Please go to Settings → Connected devices → Connection preferences → NFC');
            }
          }
        ]
      );
      return;
    }

    try {
      setNfcScanning(true);
      setNfcProgress({ status: 'initializing', message: 'Initializing NFC...' });

      console.log('📡 Starting NFC scan...');

      const treasureData = await NFCService.startNFCSessionWithProgress((progress) => {
        setNfcProgress(progress);
        console.log('NFC Progress:', progress);
      });

      if (treasureData) {
        console.log('✅ NFC treasure data received:', treasureData);

        // Convert NFCService data to our TreasureData format
        const convertedData: TreasureData = {
          treasureId: treasureData.treasureId,
          name: treasureData.name,
          description: treasureData.description,
          coordinates: treasureData.coordinates,
          location: treasureData.location,
          rarity: treasureData.rarity,
          rewardPoints: treasureData.rewardPoints,
          createdAt: treasureData.createdAt,
          imageUrl: treasureData.imageUrl,
          hash: treasureData.signature
        };

        await handleTreasureDiscovered(convertedData);
      }

    } catch (error) {
      console.error('❌ NFC scan failed:', error);
      
      const errorMessage = error instanceof Error ? error.message : 'Unknown NFC error';
      
      setNfcProgress({
        status: 'error',
        message: errorMessage
      });

      // Show error after a delay
      setTimeout(() => {
        if (errorMessage.includes('disabled')) {
          Alert.alert(
            'NFC Disabled',
            'Please enable NFC in your device settings and try again.',
            [{ text: 'OK' }]
          );
        } else if (errorMessage.includes('not supported')) {
          Alert.alert(
            'NFC Not Supported',
            'Your device does not support NFC.',
            [{ text: 'OK' }]
          );
        } else {
          Alert.alert(
            'NFC Scan Failed',
            errorMessage,
            [
              {
                text: 'Try Again',
                onPress: () => {
                  setNfcProgress(null);
                  setNfcScanning(false);
                }
              }
            ]
          );
        }
      }, 1000);

    } finally {
      setTimeout(() => {
        setNfcScanning(false);
        setNfcProgress(null);
      }, 2000);
    }
  };

  const handleTreasureDiscovered = async (treasureData: TreasureData) => {
    if (!location) {
      Alert.alert('Location Required', 'Please enable location services', [
        {
          text: 'OK',
          onPress: () => {
            setIsScanning(true);
            setIsProcessing(false);
          }
        }
      ]);
      return;
    }

    try {
      const treasureCoords = parseCoordinates(treasureData.coordinates);
      const distance = calculateDistance(location.coords, treasureCoords);

      console.log(`📏 Distance to treasure: ${distance}m`);

      if (distance > 500) {
        Alert.alert(
          'Too Far',
          `You need to be closer to the treasure location. Distance: ${Math.round(distance)}m`,
          [
            {
              text: 'Try Again',
              onPress: () => {
                setIsScanning(true);
                setIsProcessing(false);
              }
            }
          ]
        );
        return;
      }

      // Show treasure discovery modal
      setDiscoveredTreasure(treasureData);
      setShowNFTModal(true);

    } catch (coordinateError) {
      console.error('❌ Coordinate parsing error:', coordinateError);
      Alert.alert(
        'Invalid Location Data',
        'The treasure location data is invalid',
        [
          {
            text: 'Try Again',
            onPress: () => {
              setIsScanning(true);
              setIsProcessing(false);
            }
          }
        ]
      );
    }
  };

  const handleReceiveNFT = async () => {
    if (!discoveredTreasure || !location) return;

    try {
      setMintingNFT(true);
      console.log('🏴‍☠️ Starting treasure discovery process...');

      const locationProof = `${location.coords.latitude},${location.coords.longitude}`;

      // Use the useTreasures hook to discover the treasure
      const result = await discoverTreasure(
        discoveredTreasure.treasureId,
        {
          latitude: location.coords.latitude,
          longitude: location.coords.longitude
        },
        locationProof,
        scanMode === 'nfc' ? discoveredTreasure : null, // NFC data
        scanMode === 'qr' ? discoveredTreasure : null // QR data
      );

      console.log('✅ Treasure discovery successful:', result);

      setDiscoveryResult(result);
      setShowNFTModal(false);
      setDiscoveredTreasure(null);

      // Show success message with discovery details
      setTimeout(() => {
        const successMessage = result.nft?.onChain
          ? `🎉 NFT Minted Successfully!\n\nYour "${result.treasure.name}" NFT has been added to your wallet!\n\n🏆 Points Earned: ${result.profile.pointsEarned}\n${result.profile.rankUpgraded ? `🆙 Rank Up: ${result.profile.newRank}!` : ''}`
          : `🎉 Treasure Discovered!\n\nYour "${result.treasure.name}" has been recorded!\n\n🏆 Points Earned: ${result.profile.pointsEarned}\n${result.profile.rankUpgraded ? `🆙 Rank Up: ${result.profile.newRank}!` : ''}\n\nℹ️ NFT will be minted when you have sufficient SUI balance.`;

        Alert.alert(
          'Discovery Complete!',
          successMessage,
          [
            {
              text: 'View in Gallery',
              onPress: () => router.push('/(tabs)/gallery')
            },
            {
              text: 'Continue Hunting',
              onPress: () => {
                setIsScanning(true);
              }
            }
          ]
        );
      }, 500);

    } catch (error) {
      console.error('❌ Treasure discovery failed:', error);

      const errorMessage = error instanceof Error ? error.message : 'Failed to discover treasure';

      if (errorMessage.includes('already discovered') || errorMessage.includes('ALREADY_FOUND')) {
        Alert.alert(
          'Already Discovered',
          'This treasure has already been discovered by someone else.',
          [
            {
              text: 'Find Another',
              onPress: () => setIsScanning(true)
            }
          ]
        );
      } else if (errorMessage.includes('too far') || errorMessage.includes('location')) {
        Alert.alert(
          'Location Error',
          'Please get closer to the treasure location and try again.',
          [
            {
              text: 'Try Again',
              onPress: () => setIsScanning(true)
            }
          ]
        );
      } else if (errorMessage.includes('rank') || errorMessage.includes('INSUFFICIENT_RANK')) {
        Alert.alert(
          'Rank Too Low',
          'Your hunter rank is too low for this treasure. Keep hunting to increase your rank!',
          [
            {
              text: 'OK',
              onPress: () => setIsScanning(true)
            }
          ]
        );
      } else {
        Alert.alert(
          'Discovery Failed',
          errorMessage,
          [
            {
              text: 'Try Again',
              onPress: () => setIsScanning(true)
            }
          ]
        );
      }
    } finally {
      setMintingNFT(false);
    }
  };

  const calculateDistance = (
    pos1: { latitude: number; longitude: number },
    pos2: { latitude: number; longitude: number }
  ): number => {
    const R = 6371e3; // Earth radius in meters
    const φ1 = pos1.latitude * Math.PI / 180;
    const φ2 = pos2.latitude * Math.PI / 180;
    const Δφ = (pos2.latitude - pos1.latitude) * Math.PI / 180;
    const Δλ = (pos2.longitude - pos1.longitude) * Math.PI / 180;

    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
      Math.cos(φ1) * Math.cos(φ2) *
      Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c;
  };

  const parseCoordinates = (coords: string): { latitude: number; longitude: number } => {
    try {
      const [lat, lng] = coords.split(',').map(coord => {
        const num = parseFloat(coord.trim());
        if (isNaN(num)) {
          throw new Error(`Invalid coordinate: ${coord}`);
        }
        return num;
      });

      if (lat < -90 || lat > 90 || lng < -180 || lng > 180) {
        throw new Error('Coordinates out of valid range');
      }

      return { latitude: lat, longitude: lng };
    } catch (error) {
      console.error('❌ Coordinate parsing error:', error);
      throw new Error('Invalid coordinate format');
    }
  };

  const toggleTorch = () => {
    setEnableTorch(prev => !prev);
  };

  const toggleCameraFacing = () => {
    setCameraFacing(current => (current === 'back' ? 'front' : 'back'));
  };

  const getRarityInfo = (rarity: number) => {
    return NFCService.getRarityInfo(rarity);
  };

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  // Create sample QR codes for testing
  const createSampleQR = () => {
    const sampleTreasures = [
      {
        treasureId: 'TREASURE_001',
        name: 'Golden Dragon Statue',
        coordinates: '21.0285,105.8542',
        rarity: 3
      },
      {
        treasureId: 'VN_COMMON_001',
        name: 'Ancient Bronze Mirror',
        coordinates: '21.0300,105.8500',
        rarity: 1
      }
    ];

    const randomTreasure = sampleTreasures[Math.floor(Math.random() * sampleTreasures.length)];

    Alert.alert(
      'Sample QR Code',
      `Scan this treasure ID: ${randomTreasure.treasureId}\n\nOr create a QR code with this JSON:\n${JSON.stringify(randomTreasure)}`,
      [{ text: 'OK' }]
    );
  };

  if (!permission) {
    return (
      <View style={[styles.container, { paddingTop: insets.top }]}>
        <View style={styles.loadingContainer}>
          <Ionicons name="camera-outline" size={80} color="#666" />
          <Text style={styles.loadingText}>Requesting permissions...</Text>
        </View>
      </View>
    );
  }

  if (!permission.granted) {
    return (
      <View style={[styles.container, { paddingTop: insets.top }]}>
        <View style={styles.errorContainer}>
          <Ionicons name="lock-closed-outline" size={80} color="#ef4444" />
          <Text style={styles.errorText}>Camera permission is required for QR scanning</Text>
          <TouchableOpacity style={styles.retryButton} onPress={requestPermission}>
            <Text style={styles.retryButtonText}>Grant Permission</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  }

  return (
    <View style={[styles.container, { paddingTop: insets.top }]}>
      {/* Header */}
      <LinearGradient
        colors={['#1a1a1a', '#0f0f0f']}
        style={styles.header}
      >
        <View style={styles.headerContent}>
          <TouchableOpacity onPress={() => router.back()}>
            <Ionicons name="arrow-back" size={24} color="#fff" />
          </TouchableOpacity>
          <Text style={styles.title}>Treasure Hunt</Text>
          <TouchableOpacity onPress={createSampleQR}>
            <Ionicons name="help-circle-outline" size={24} color="#fff" />
          </TouchableOpacity>
        </View>

        <View style={styles.modeSelector}>
          <TouchableOpacity
            style={[styles.modeButton, scanMode === 'qr' && styles.activeModeButton]}
            onPress={() => setScanMode('qr')}
          >
            <Ionicons
              name="qr-code-outline"
              size={24}
              color={scanMode === 'qr' ? '#fff' : '#666'}
            />
            <Text style={[styles.modeText, scanMode === 'qr' && styles.activeModeText]}>
              QR Code
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[
              styles.modeButton, 
              scanMode === 'nfc' && styles.activeModeButton,
              !nfcSupported && styles.disabledModeButton
            ]}
            onPress={() => {
              if (nfcSupported) {
                setScanMode('nfc');
              } else {
                Alert.alert('NFC Not Supported', 'Your device does not support NFC functionality.');
              }
            }}
            disabled={!nfcSupported}
          >
            <Ionicons
              name="radio-outline"
              size={24}
              color={!nfcSupported ? '#444' : scanMode === 'nfc' ? '#fff' : '#666'}
            />
            <Text style={[
              styles.modeText, 
              scanMode === 'nfc' && styles.activeModeText,
              !nfcSupported && styles.disabledModeText
            ]}>
              NFC Tag
            </Text>
            {!nfcSupported && (
              <View style={styles.unsupportedBadge}>
                <Text style={styles.unsupportedText}>N/A</Text>
              </View>
            )}
          </TouchableOpacity>
        </View>
      </LinearGradient>

      {scanMode === 'qr' ? (
        <View style={styles.cameraContainer}>
          <CameraView
            style={StyleSheet.absoluteFillObject}
            facing={cameraFacing}
            enableTorch={enableTorch}
            onBarcodeScanned={isScanning ? handleBarCodeScanned : undefined}
            barcodeScannerSettings={{
              barcodeTypes: ['qr'],
            }}
          />

          <View style={styles.cameraControls}>
            <TouchableOpacity style={styles.controlButton} onPress={toggleTorch}>
              <Ionicons
                name={enableTorch ? 'flash' : 'flash-off'}
                size={24}
                color="#fff"
              />
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.controlButton}
              onPress={toggleCameraFacing}
            >
              <Ionicons name="camera-reverse-outline" size={24} color="#fff" />
            </TouchableOpacity>
          </View>

          <View style={styles.scanOverlay}>
            <View style={styles.scanFrame}>
              <View style={[styles.corner, styles.topLeft]} />
              <View style={[styles.corner, styles.topRight]} />
              <View style={[styles.corner, styles.bottomLeft]} />
              <View style={[styles.corner, styles.bottomRight]} />
            </View>

            <Text style={styles.scanText}>
              {isProcessing
                ? 'Processing treasure data...'
                : isScanning
                  ? 'Scanning for treasure...'
                  : 'Position QR code within the frame'
              }
            </Text>

            <TouchableOpacity
              style={[
                styles.scanButton,
                isScanning && styles.scanButtonActive,
                (isProcessing || treasuresLoading) && styles.scanButtonProcessing
              ]}
              onPress={() => {
                if (!isProcessing && !treasuresLoading) {
                  setIsScanning(!isScanning);
                }
              }}
              disabled={isProcessing || treasuresLoading}
            >
              <LinearGradient
                colors={
                  (isProcessing || treasuresLoading)
                    ? ['#f59e0b', '#d97706']
                    : isScanning
                      ? ['#ef4444', '#dc2626']
                      : ['#6366f1', '#4f46e5']
                }
                style={styles.scanButtonGradient}
              >
                {(isProcessing || treasuresLoading) ? (
                  <ActivityIndicator size="small" color="#fff" />
                ) : (
                  <Ionicons name={isScanning ? 'stop' : 'scan'} size={24} color="#fff" />
                )}
                <Text style={styles.scanButtonText}>
                  {(isProcessing || treasuresLoading) ? 'Processing...' : isScanning ? 'Stop Scan' : 'Start Scan'}
                </Text>
              </LinearGradient>
            </TouchableOpacity>
          </View>
        </View>
      ) : (
        <View style={styles.nfcContainer}>
          <Animated.View style={[styles.nfcIconContainer, { transform: [{ scale: pulseAnim }] }]}>
            <LinearGradient
              colors={nfcSupported && nfcEnabled ? ['#6366f1', '#4f46e5'] : ['#666', '#555']}
              style={styles.nfcIcon}
            >
              <Ionicons name="radio" size={80} color="#fff" />
            </LinearGradient>
          </Animated.View>

          <Text style={styles.nfcTitle}>NFC Treasure Hunt</Text>
          
         {!nfcSupported ? (
            <View style={styles.nfcStatusContainer}>
              <Text style={styles.nfcText}>
                NFC is not supported on this device. Please use QR code scanning instead.
              </Text>
            </View>
          ) : !nfcEnabled ? (
            <View style={styles.nfcStatusContainer}>
              <Text style={styles.nfcText}>
                NFC is disabled. Please enable NFC in your device settings to scan treasure tags.
              </Text>
              <TouchableOpacity 
                style={styles.enableNfcButton}
                onPress={() => Alert.alert('Enable NFC', 'Go to Settings → Connected devices → NFC and enable it.')}
              >
                <Text style={styles.enableNfcButtonText}>Open Settings Guide</Text>
              </TouchableOpacity>
            </View>
          ) : (
            <View style={styles.nfcStatusContainer}>
              <Text style={styles.nfcText}>
                Hold your device near an NFC treasure tag to discover it.
              </Text>
              
              {nfcProgress && (
                <View style={styles.nfcProgressContainer}>
                  <ActivityIndicator size="small" color="#6366f1" />
                  <Text style={styles.nfcProgressText}>{nfcProgress.message}</Text>
                  {nfcProgress.progress && (
                    <View style={styles.progressBarContainer}>
                      <View style={styles.progressBar}>
                        <View style={[styles.progressFill, { width: `${nfcProgress.progress}%` }]} />
                      </View>
                      <Text style={styles.progressPercentText}>{Math.round(nfcProgress.progress)}%</Text>
                    </View>
                  )}
                </View>
              )}

              <TouchableOpacity
                style={[
                  styles.nfcButton,
                  nfcScanning && styles.nfcButtonScanning,
                  (!nfcSupported || !nfcEnabled) && styles.nfcButtonDisabled
                ]}
                onPress={handleNFCScan}
                disabled={nfcScanning || !nfcSupported || !nfcEnabled}
              >
                <LinearGradient
                  colors={
                    nfcScanning 
                      ? ['#f59e0b', '#d97706'] 
                      : nfcSupported && nfcEnabled 
                        ? ['#6366f1', '#4f46e5'] 
                        : ['#666', '#555']
                  }
                  style={styles.nfcButtonGradient}
                >
                  {nfcScanning ? (
                    <ActivityIndicator size="small" color="#fff" />
                  ) : (
                    <Ionicons name="radio-outline" size={24} color="#fff" />
                  )}
                  <Text style={styles.nfcButtonText}>
                    {nfcScanning ? 'Scanning...' : 'Start NFC Scan'}
                  </Text>
                </LinearGradient>
              </TouchableOpacity>
            </View>
          )}

          <View style={styles.nfcInstructions}>
            <Text style={styles.instructionTitle}>NFC Instructions:</Text>
            
            <View style={styles.instructionItem}>
              <Ionicons name="information-circle-outline" size={16} color="#6366f1" />
              <Text style={styles.instructionText}>
                Make sure NFC is enabled in your device settings
              </Text>
            </View>
            
            <View style={styles.instructionItem}>
              <Ionicons name="radio-outline" size={16} color="#6366f1" />
              <Text style={styles.instructionText}>
                Hold the back of your phone near the NFC tag
              </Text>
            </View>
            
            <View style={styles.instructionItem}>
              <Ionicons name="time-outline" size={16} color="#6366f1" />
              <Text style={styles.instructionText}>
                Keep steady for 2-3 seconds until the tag is read
              </Text>
            </View>

            {Platform.OS === 'android' && (
              <View style={styles.instructionItem}>
                <Ionicons name="settings-outline" size={16} color="#f59e0b" />
                <Text style={styles.instructionText}>
                  Android: Settings → Connected devices → Connection preferences → NFC
                </Text>
              </View>
            )}

            {Platform.OS === 'ios' && (
              <View style={styles.instructionItem}>
                <Ionicons name="settings-outline" size={16} color="#f59e0b" />
                <Text style={styles.instructionText}>
                  iOS: Settings → General → NFC (iPhone 7 and later)
                </Text>
              </View>
            )}
          </View>
        </View>
      )}

      {/* NFT Discovery Modal */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={showNFTModal}
        onRequestClose={() => setShowNFTModal(false)}
      >
        <View style={styles.nftModalOverlay}>
          <Animated.View
            style={[
              styles.nftModalContent,
              {
                transform: [{
                  translateY: celebrationAnim.interpolate({
                    inputRange: [0, 1],
                    outputRange: [height, 0]
                  })
                }]
              }
            ]}
          >
            <ScrollView showsVerticalScrollIndicator={false}>
              {discoveredTreasure && (
                <>
                  {/* Header */}
                  <View style={styles.nftHeader}>
                    <View style={styles.nftHeaderTop}>
                      <Text style={styles.treasureFoundText}>
                        🎉 Treasure Found via {scanMode.toUpperCase()}!
                      </Text>
                      <TouchableOpacity
                        style={styles.closeNFTButton}
                        onPress={() => setShowNFTModal(false)}
                      >
                        <Ionicons name="close" size={24} color="#666" />
                      </TouchableOpacity>
                    </View>

                    {/* Rarity Badge */}
                    <View style={[
                      styles.rarityBadge,
                      { backgroundColor: getRarityInfo(discoveredTreasure.rarity).bg }
                    ]}>
                      <Text style={styles.rarityEmoji}>
                        {getRarityInfo(discoveredTreasure.rarity).emoji}
                      </Text>
                      <Text style={[
                        styles.rarityText,
                        { color: getRarityInfo(discoveredTreasure.rarity).color }
                      ]}>
                        {getRarityInfo(discoveredTreasure.rarity).name}
                      </Text>
                    </View>

                    {/* Scan Method Badge */}
                    <View style={[
                      styles.methodBadge,
                      { backgroundColor: scanMode === 'nfc' ? '#6366f120' : '#10b98120' }
                    ]}>
                      <Ionicons 
                        name={scanMode === 'nfc' ? 'radio' : 'qr-code'} 
                        size={16} 
                        color={scanMode === 'nfc' ? '#6366f1' : '#10b981'} 
                      />
                      <Text style={[
                        styles.methodText,
                        { color: scanMode === 'nfc' ? '#6366f1' : '#10b981' }
                      ]}>
                        Scanned via {scanMode.toUpperCase()}
                      </Text>
                    </View>
                  </View>

                  {/* NFT Image/Preview */}
                  <View style={styles.nftImageContainer}>
                    <Animated.View style={[
                      styles.nftImageWrapper,
                      {
                        shadowColor: getRarityInfo(discoveredTreasure.rarity).color,
                        transform: [{
                          rotateY: shimmerAnim.interpolate({
                            inputRange: [0, 1],
                            outputRange: ['0deg', '360deg']
                          })
                        }]
                      }
                    ]}>
                      {discoveredTreasure.imageUrl ? (
                        <Image
                          source={{ uri: discoveredTreasure.imageUrl }}
                          style={styles.nftImage}
                          resizeMode="cover"
                        />
                      ) : (
                        <LinearGradient
                          colors={['#6366f1', '#8b5cf6', '#ec4899']}
                          style={styles.nftImage}
                        >
                          <Ionicons name="diamond" size={80} color="#fff" />
                        </LinearGradient>
                      )}
                    </Animated.View>
                  </View>

                  {/* NFT Details */}
                  <View style={styles.nftDetails}>
                    <Text style={styles.nftName}>{discoveredTreasure.name}</Text>
                    <Text style={styles.nftDescription}>{discoveredTreasure.description}</Text>

                    {/* Treasure Info */}
                    <View style={styles.treasureInfo}>
                      <View style={styles.infoRow}>
                        <Ionicons name="location-outline" size={20} color="#6366f1" />
                        <View style={styles.infoContent}>
                          <Text style={styles.infoLabel}>Location</Text>
                          <Text style={styles.infoValue}>{discoveredTreasure.location}</Text>
                        </View>
                      </View>

                      <View style={styles.infoRow}>
                        <Ionicons name="trophy-outline" size={20} color="#f59e0b" />
                        <View style={styles.infoContent}>
                          <Text style={styles.infoLabel}>Reward Points</Text>
                          <Text style={styles.infoValue}>{discoveredTreasure.rewardPoints.toLocaleString()}</Text>
                        </View>
                      </View>

                      <View style={styles.infoRow}>
                        <Ionicons name="time-outline" size={20} color="#8b5cf6" />
                        <View style={styles.infoContent}>
                          <Text style={styles.infoLabel}>Discovered</Text>
                          <Text style={styles.infoValue}>{formatDate(discoveredTreasure.createdAt)}</Text>
                        </View>
                      </View>

                      <View style={styles.infoRow}>
                        <Ionicons name="finger-print-outline" size={20} color="#ef4444" />
                        <View style={styles.infoContent}>
                          <Text style={styles.infoLabel}>Treasure ID</Text>
                          <Text style={styles.infoValue} numberOfLines={1}>{discoveredTreasure.treasureId}</Text>
                        </View>
                      </View>

                      {discoveredTreasure.hash && (
                        <View style={styles.infoRow}>
                          <Ionicons name="shield-checkmark-outline" size={20} color="#10b981" />
                          <View style={styles.infoContent}>
                            <Text style={styles.infoLabel}>Verification Hash</Text>
                            <Text style={styles.infoValue} numberOfLines={1}>{discoveredTreasure.hash}</Text>
                          </View>
                        </View>
                      )}
                    </View>

                    {/* Action Buttons */}
                    <View style={styles.actionButtons}>
                      <TouchableOpacity
                        style={styles.viewDataButton}
                        onPress={() => {
                          Alert.alert(
                            'Raw Treasure Data',
                            JSON.stringify(discoveredTreasure, null, 2),
                            [{ text: 'OK' }]
                          );
                        }}
                      >
                        <Ionicons name="code-outline" size={20} color="#666" />
                        <Text style={styles.viewDataText}>View Raw Data</Text>
                      </TouchableOpacity>

                      <TouchableOpacity
                        style={[styles.receiveNFTButton, (mintingNFT || treasuresLoading) && styles.buttonDisabled]}
                        onPress={handleReceiveNFT}
                        disabled={mintingNFT || treasuresLoading}
                      >
                        <LinearGradient
                          colors={(mintingNFT || treasuresLoading) ? ['#666', '#555'] : ['#6366f1', '#4f46e5']}
                          style={styles.receiveNFTGradient}
                        >
                          {(mintingNFT || treasuresLoading) ? (
                            <ActivityIndicator size="small" color="#fff" />
                          ) : (
                            <Ionicons name="wallet-outline" size={24} color="#fff" />
                          )}
                          <Text style={styles.receiveNFTText}>
                            {(mintingNFT || treasuresLoading) ? 'Discovering...' : 'Discover Treasure'}
                          </Text>
                        </LinearGradient>
                      </TouchableOpacity>
                    </View>
                  </View>
                </>
              )}
            </ScrollView>
          </Animated.View>
        </View>
      </Modal>

      {/* Location Status Bar */}
      <View style={styles.locationStatus}>
        <Ionicons
          name={location ? "location" : "location-outline"}
          size={16}
          color={location ? "#10b981" : "#ef4444"}
        />
        <Text style={[
          styles.locationText,
          { color: location ? "#10b981" : "#ef4444" }
        ]}>
          {location ? "Location Ready" : "Getting Location..."}
        </Text>
        {location && (
          <Text style={styles.coordinatesText}>
            {location.coords.latitude.toFixed(4)}, {location.coords.longitude.toFixed(4)}
          </Text>
        )}
        
        {/* NFC Status */}
        {scanMode === 'nfc' && (
          <>
            <View style={styles.statusDivider} />
            <Ionicons
              name={nfcSupported && nfcEnabled ? "radio" : "radio-outline"}
              size={16}
              color={nfcSupported && nfcEnabled ? "#10b981" : "#ef4444"}
            />
            <Text style={[
              styles.locationText,
              { color: nfcSupported && nfcEnabled ? "#10b981" : "#ef4444" }
            ]}>
              {!nfcSupported ? "NFC Not Supported" : !nfcEnabled ? "NFC Disabled" : "NFC Ready"}
            </Text>
          </>
        )}
      </View>
    </View>
  );
}

// Styles for the new NFC components
const additionalStyles = StyleSheet.create({
  disabledModeButton: {
    opacity: 0.5,
  },
  disabledModeText: {
    color: '#444',
  },
  unsupportedBadge: {
    position: 'absolute',
    top: -5,
    right: -5,
    backgroundColor: '#ef4444',
    borderRadius: 8,
    paddingHorizontal: 4,
    paddingVertical: 2,
  },
  unsupportedText: {
    color: '#fff',
    fontSize: 8,
    fontWeight: 'bold',
  },
  nfcStatusContainer: {
    alignItems: 'center',
    marginBottom: 30,
  },
  enableNfcButton: {
    backgroundColor: '#f59e0b',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 20,
    marginTop: 15,
  },
  enableNfcButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  nfcProgressContainer: {
    alignItems: 'center',
    backgroundColor: '#1a1a1a',
    padding: 20,
    borderRadius: 16,
    marginBottom: 20,
    width: '90%',
  },
  nfcProgressText: {
    color: '#fff',
    fontSize: 14,
    marginTop: 10,
    textAlign: 'center',
  },
  progressBarContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 10,
    width: '100%',
  },
  progressBar: {
    flex: 1,
    height: 6,
    backgroundColor: '#333',
    borderRadius: 3,
    marginRight: 10,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#6366f1',
    borderRadius: 3,
  },
  progressPercentText: {
    color: '#888',
    fontSize: 12,
    minWidth: 35,
  },
  nfcButtonScanning: {
    opacity: 0.8,
  },
  nfcButtonDisabled: {
    opacity: 0.5,
  },
  methodBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    alignSelf: 'flex-start',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 15,
    gap: 6,
    marginTop: 10,
  },
  methodText: {
    fontSize: 12,
    fontWeight: '600',
  },
  statusDivider: {
    width: 1,
    height: 16,
    backgroundColor: '#333',
    marginHorizontal: 8,
  },
});

// Merge additional styles with existing styles
const styles = StyleSheet.create({
  // ... existing styles from the first part ...
  // Copy all the styles from the original hunt.tsx here
  
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#0f0f0f',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#0f0f0f',
    padding: 20,
  },
  loadingText: {
    color: '#fff',
    fontSize: 16,
    marginTop: 20,
    textAlign: 'center',
  },
  errorText: {
    color: '#ef4444',
    fontSize: 16,
    textAlign: 'center',
    marginTop: 20,
    marginBottom: 30,
    lineHeight: 22,
  },
  retryButton: {
    backgroundColor: '#6366f1',
    paddingHorizontal: 30,
    paddingVertical: 12,
    borderRadius: 25,
  },
  retryButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  header: {
    paddingTop: 20,
    paddingBottom: 20,
    paddingHorizontal: 20,
  },
  headerContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
  },
  modeSelector: {
    flexDirection: 'row',
    gap: 12,
  },
  modeButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderRadius: 12,
    backgroundColor: '#333',
    gap: 8,
    position: 'relative',
  },
  activeModeButton: {
    backgroundColor: '#6366f1',
  },
  modeText: {
    color: '#666',
    fontWeight: '600',
    fontSize: 14,
  },
  activeModeText: {
    color: '#fff',
  },

  // Camera Components
  cameraContainer: {
    flex: 1,
  },
  cameraControls: {
    position: 'absolute',
    top: 20,
    right: 20,
    gap: 12,
    zIndex: 2,
  },
  controlButton: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: 'rgba(0,0,0,0.7)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  scanOverlay: {
    ...StyleSheet.absoluteFillObject,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.3)',
  },
  scanFrame: {
    width: 250,
    height: 250,
    position: 'relative',
  },
  corner: {
    position: 'absolute',
    width: 20,
    height: 20,
    borderColor: '#6366f1',
    borderWidth: 3,
  },
  topLeft: {
    top: 0,
    left: 0,
    borderRightWidth: 0,
    borderBottomWidth: 0,
  },
  topRight: {
    top: 0,
    right: 0,
    borderLeftWidth: 0,
    borderBottomWidth: 0,
  },
  bottomLeft: {
    bottom: 0,
    left: 0,
    borderRightWidth: 0,
    borderTopWidth: 0,
  },
  bottomRight: {
    bottom: 0,
    right: 0,
    borderLeftWidth: 0,
    borderTopWidth: 0,
  },
  scanText: {
    color: '#fff',
    fontSize: 16,
    marginTop: 30,
    textAlign: 'center',
    backgroundColor: 'rgba(0,0,0,0.7)',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 20,
    maxWidth: '80%',
  },
  scanButton: {
    marginTop: 30,
    borderRadius: 25,
    overflow: 'hidden',
  },
  scanButtonActive: {},
  scanButtonProcessing: {
    opacity: 0.8,
  },
  scanButtonGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 30,
    paddingVertical: 15,
    gap: 10,
  },
  scanButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },

  // NFC Components
  nfcContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  nfcIconContainer: {
    marginBottom: 20,
  },
  nfcIcon: {
    width: 120,
    height: 120,
    borderRadius: 60,
    justifyContent: 'center',
    alignItems: 'center',
  },
  nfcTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 10,
  },
  nfcText: {
    fontSize: 16,
    color: '#ccc',
    textAlign: 'center',
    marginBottom: 30,
    lineHeight: 22,
  },
  nfcButton: {
    borderRadius: 25,
    overflow: 'hidden',
    marginBottom: 40,
  },
  nfcButtonGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 40,
    paddingVertical: 15,
    gap: 10,
  },
  nfcButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  nfcInstructions: {
    backgroundColor: '#1a1a1a',
    padding: 20,
    borderRadius: 16,
    width: '100%',
  },
  instructionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 15,
  },
  instructionItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
    gap: 12,
  },
  instructionText: {
    fontSize: 14,
    color: '#ccc',
    flex: 1,
    lineHeight: 18,
  },

  // Location Status
  locationStatus: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    backgroundColor: '#1a1a1a',
    gap: 8,
  },
  locationText: {
    fontSize: 14,
    fontWeight: '600',
  },
  coordinatesText: {
    fontSize: 12,
    color: '#888',
    fontFamily: 'monospace',
  },

  // NFT Discovery Modal Styles
  nftModalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    justifyContent: 'flex-end',
  },
  nftModalContent: {
    backgroundColor: '#1a1a1a',
    borderTopLeftRadius: 25,
    borderTopRightRadius: 25,
    maxHeight: height * 0.9,
    paddingBottom: 40,
  },
  nftHeader: {
    padding: 25,
    paddingBottom: 15,
  },
  nftHeaderTop: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  treasureFoundText: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
  },
  closeNFTButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#333',
    justifyContent: 'center',
    alignItems: 'center',
  },
  rarityBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    alignSelf: 'flex-start',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    gap: 8,
  },
  rarityEmoji: {
    fontSize: 20,
  },
  rarityText: {
    fontSize: 16,
    fontWeight: 'bold',
  },

  // NFT Image
  nftImageContainer: {
    alignItems: 'center',
    marginBottom: 25,
  },
  nftImageWrapper: {
    width: 200,
    height: 200,
    borderRadius: 20,
    overflow: 'hidden',
    shadowOffset: { width: 0, height: 10 },
    shadowOpacity: 0.3,
    shadowRadius: 20,
    elevation: 10,
  },
  nftImage: {
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
  },

  // NFT Details
  nftDetails: {
    paddingHorizontal: 25,
  },
  nftName: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 10,
    textAlign: 'center',
  },
  nftDescription: {
    fontSize: 16,
    color: '#ccc',
    textAlign: 'center',
    marginBottom: 25,
    lineHeight: 22,
  },

  // Treasure Info
  treasureInfo: {
    backgroundColor: '#2a2a2a',
    borderRadius: 15,
    padding: 20,
    marginBottom: 25,
  },
  infoRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
    gap: 15,
  },
  infoContent: {
    flex: 1,
  },
  infoLabel: {
    fontSize: 12,
    color: '#888',
    marginBottom: 2,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
  },
  infoValue: {
    fontSize: 16,
    color: '#fff',
    fontWeight: '500',
  },

  // Action Buttons
  actionButtons: {
    gap: 15,
  },
  viewDataButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#333',
    paddingVertical: 15,
    borderRadius: 15,
    gap: 10,
  },
  viewDataText: {
    color: '#ccc',
    fontSize: 16,
    fontWeight: '600',
  },
  receiveNFTButton: {
    borderRadius: 15,
    overflow: 'hidden',
  },
  buttonDisabled: {
    opacity: 0.7,
  },
  receiveNFTGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 18,
    gap: 12,
  },
  receiveNFTText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  
  // Merge the additional styles
  ...additionalStyles,
});

